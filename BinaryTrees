/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>

using namespace std;

class BinaryTreeNode {
    public: 
    int data;
    BinaryTreeNode* left;
    BinaryTreeNode* right;
    BinaryTreeNode(int data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
    ~BinaryTreeNode() {
        delete left;
        delete right;
    }
};

BinaryTreeNode* takeInputLevel() {
    int rootData;
    cout<<"Enter root data"<<endl;
    cin>>rootData;
    BinaryTreeNode* root = new BinaryTreeNode(rootData);
    queue<BinaryTreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        BinaryTreeNode* child = q.front();
        q.pop();
        int left , right;
        cout<<"Enter Left Data "<<child->data;
        cin>>left;
        if (left != -1) {
            BinaryTreeNode* leftChild = new BinaryTreeNode(left);
            q.push(leftChild);
            child->left = leftChild;
        }
        cout<<"enter right data "<<child->data;
        cin>>right;
        if (right != -1) {
            BinaryTreeNode* rightChild = new BinaryTreeNode(right);
            q.push(rightChild);
            child->right = rightChild;
        }
        
    }
    return root;
}

void printInputLevel(BinaryTreeNode* root) {
    queue<BinaryTreeNode*> completeNodes;
    completeNodes.push(root);
    while(!completeNodes.empty()){
        BinaryTreeNode* temp = completeNodes.front();
        completeNodes.pop();
        BinaryTreeNode* left  = temp->left;
        BinaryTreeNode* right = temp->right;
        cout<<temp->data<<":";
        if(left != NULL){
        	completeNodes.push(temp->left);
            cout<<"L"<<":"<<left->data<<",";
        }else{
            cout<<"L:-1,";
        }
        if(right != NULL){
        	completeNodes.push(temp->right);    
        	cout<<"R:"<<right->data;
        }else{
        cout<<"R:-1";
        }
        cout<<endl;
    }
}

void mirrorImage(BinaryTreeNode* root) {
    if (root == NULL) {
        return;
    }
    BinaryTreeNode* temp = root->left;
    root->left = root->right;
    root->right = temp;
    
    mirrorImage(root->left);
    mirrorImage(root->right);
    
    return ;
}

int height(BinaryTreeNode *root) {
    if(root == NULL){
        return 0 ;
    }
    
    int left = height(root->left);
    int right = height(root->right);
    
    return 1 + max(left , right);

}

bool isNodePresent(BinaryTreeNode* root, int x) {
    if(root == NULL){
        return false ;
    }	
    
    if(root -> data == x){
        return true ;
    }
       bool left =  isNodePresent(root->left , x);
        bool right = isNodePresent(root->right , x);
    	return left || right ;
}

void inOrder(BinaryTreeNode* root) {
    if (root == NULL) {
        return;
    }
    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}

void preOrder(BinaryTreeNode* root) {
    if (root == NULL) {
        return;
    }
    cout<<root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);
}

void postOrder(BinaryTreeNode* root) {
    if (root == NULL) {
        return ;
    }
    postOrder(root->left);
    postOrder(root->right);
    cout<<root->data<<" ";
}

// BinaryTreeNode* inorderToPost(int inorder[], int preOrder[], int inS, int inE, int preS, int preE) {
//     if (inS == inE && preS == preE) {
//         BinaryTreeNode* child = new BinaryTreeNode(inorder[inS]);
//         return child;
//     }
//     int value = preOrder[0];
//     int i=inS;
//     for (; i<=inE; i++) {
//         if (value == inorder[i]) {
//             break;
//         }
//     }
//      BinaryTreeNode* root = new BinaryTreeNode(value);
//      int leftLength = i - inS ;
//      if (leftLength > 0) {
//       root->left = inorderToPost(inorder, preOrder, inS, i-1, preS + 1, preS + leftLength);   
//      }
//      int rightLength = inE - i;
//      if (rightLength > 0) {
//          int send = (preS + leftLength + 1);
//          root->right = inorderToPost(inOrder, preOrder, i+1, inE, send, preE);
//      } 
//     return root;    
// }

// BinaryTreeNode* inorderToPre(int inorder[], int preOrder[], int s , int e) {
//     if (s > e) {
//         return NULL;
//     }
//     int i=s;
//     for (; i<=e; i++) {
//         if (preOrder[0] == inorder[i]) {
//             break;
//         }
//     }
//     int lengthInc = i - s;
//     BinaryTreeNode* root = new BinaryTreeNode(preOrder[0]);
//     root->left = inorderToPost(inorder, preOrder+1, s , i-1);
//     root->right = inorderToPost(inorder, preOrder+1+lengthInc, i+1 ,e);
//     return root;
// }

// BinaryTreeNode<int>* inorderToPost(int* inorder, int* postOrder, int s , int e, int n) {
//     if (s > e) {
//         return NULL;
//     }
//     int i=s;
//     for (; i<=e; i++) {
//         if (postOrder[n] == inorder[i]) {
//             break;
//         }
//     }
//     int lengthInc = e - i;
//     BinaryTreeNode<int>* root = new BinaryTreeNode<int>(postOrder[n]);
//     root->right = inorderToPost(inorder, postOrder, i+1 ,e, n-1);
//     root->left = inorderToPost(inorder, postOrder, s , i-1, n-1-lengthInc);
    
//     return root;
// }

// Code with static key 
// BinaryTreeNode<int>* treeHelper(int* preorder , int* inorder , int start , int end){
//     if(start > end){
//         return NULL ;
//     }
    
//     static int preIndex = end ;
    
//     BinaryTreeNode<int>* root = new BinaryTreeNode<int>(preorder[preIndex--]);
    
//     int index = search(root->data , inorder , start , end);
    
//     BinaryTreeNode<int>* rightTree = treeHelper(preorder , inorder , index+1  , end);
//     BinaryTreeNode<int>* leftTree = treeHelper(preorder , inorder , start , index - 1);
    
//     root -> left = leftTree ;
//     root -> right = rightTree ; 
    
//     return root ;
// }

// vector<Node<int>*> linkListLevel(BinaryTreeNode<int>* root) {
//     vector<Node<int>*> v;
    
//     if (root == NULL) {
//         return v;
//     }
//     queue<pair<BinaryTreeNode<int>* , int>> q;
//     q.push(make_pair(root , 1));
//     int currentIndex = 0;
    
    
//     Node<int>* next = NULL;
//     while (!q.empty()) {
//         pair<BinaryTreeNode<int>*, int> rootData = q.front();
//         q.pop();
//         if (rootData.second != currentIndex) {
//              next = new Node<int>(rootData.first->data);
//             v.push_back(next);
//             currentIndex++;
//         } else {
//             Node<int>* tempNext = new Node<int>(rootData.first->data);
//             next->next = tempNext;
//             next = tempNext;
//         }
//         if (rootData.first->left) {
//         	q.push(make_pair(rootData.first->left , rootData.second + 1));    
//         }
//         if (rootData.first->right) {
//       	 q.push(make_pair(rootData.first->right , rootData.second + 1));     
//         }
//     }
//     return v;
// }

pair<vector<int>, int> maxRootToLeaf(BinaryTreeNode* root) {
    if (root == NULL) {
        pair<vector<int>, int> p;
        vector<int> childV;
        p.first = childV;
        p.second = 0;
        return p;
    }
    
    pair<vector<int>, int> left = maxRootToLeaf(root->left);
    pair<vector<int>, int> right = maxRootToLeaf(root->right);

    
    if (left.second > right.second) {
        left.second += 1;
        left.first.push_back(root->data);
        return left;
    } else {
            right.second += 1;
        right.first.push_back(root->data);
        return right;
    }
}


int heightFunction(char str[] , int &i ){  // nll , nlnll => check height of preorder

    if(str[i] == '\0'){
        return 0;
    }
    
    
    
    if(str[i] != 'n'){
		return 1 ;    
    }
    
    
    int leftHeight = 1 + heightFunction(str , ++i );
    int rightHeight = 1 + heightFunction(str , ++i);

    
    return max(leftHeight , rightHeight) ;
    
}

int main()
{
    BinaryTreeNode* root = takeInputLevel();
    // cout<<endl<<endl;
    // printInputLevel(root);
    // cout<<endl<<endl;
    // mirrorImage(root);
    // printInputLevel(root);
    // inOrder(root);
    // cout<<endl<<endl;
    // preOrder(root);
    // cout<<endl<<endl;
    // postOrder(root);
    // int n = 7;
    // int preOrder[] = {1, 2, 4, 5, 3, 6, 7}; 
    // int inorder[]  = {4, 2, 5, 1, 6, 3, 7}; 
   // BinaryTreeNode* root = inorderToPre(inorder, preOrder, 0 , n-1);
    //  BinaryTreeNode* root = inorderToPost(inorder, preOrder, 0 , n-1);
    printInputLevel(root);
    cout<<endl<<endl;
    pair<vector<int>, int> p = maxRootToLeaf(root);
    cout<<p.second<<endl;
    vector<int> result = p.first;
    for (int i = 0; i<=(result.size() - 1) ; i++) {
        cout<<result[i]<<" ";
    }
    delete root;
    // 8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
    return 0;
}

// 1 
// 2 3 
// 4 5 6 7 
