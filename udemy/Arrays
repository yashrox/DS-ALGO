/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

************************** ARRAY *********************************************/

#include <bits/stdc++.h>
using namespace std;


vector<vector<int>> tiplet(vector<int> v , int sum) {
    int size = v.size();
    vector<vector<int>> result;
    for (int i=0; i<size; i++) {
        
        int j = i+1;
        int k = size - 1;
        
        while(j < k) {
            int currentSum = v[i];
            currentSum += v[j];
            currentSum += v[k];
            
            if (currentSum == sum) {
                result.push_back({v[i], v[j], v[k]});
                j++;
                k--;
            } else if(currentSum > sum) {
                k--;
            } else {
                j++;
            }
            
        }
    }
    
    return result;
}

int ForwordBackward(vector<int> v, int start, int end, bool isForward) {
    int count = 1;
    if (isForward) {
        for (int i = start; i<end; i++) {
            if (v[i] < v[i+1]) {
                break;
            }
            count++;
        }
    } else {
        for (int i = start; i>0; i--) {
                if(v[i] < v[i-1]) {
                    break;
                }
                count++;
        }
    }
    
    return count;
}

int mountain(vector<int> v) {
    int maxCount = 0;
    int size = v.size() - 1;
    for (int i=1; i<size; i++) {
        if (v[i] > v[i-1] && v[i] > v[i+1]) {
            int intermediateValue = 1 + ForwordBackward(v, i-1, size, false) + ForwordBackward(v, i+1, size, true);
            cout<<intermediateValue<<endl;
            maxCount = max(maxCount, intermediateValue);
        }
    }
    cout<<"......................."<<endl;
    return maxCount;
}


int mountain2(vector<int> a) {
    int maxLenght = INT_MIN;
    int startIndex = 0;
    int tempLenght = 0;
    int size = a.size();
    for (int i=0; i<size; i++) {
        if ((i == 0 && a[i] > a[i+1]) || (i == size - 1 && a[i-1] < a[i])) {
            startIndex = i;
            continue;
        } else if (a[i] < a[i-1] && a[i] < a[i+1] && i != 0 && i != (size - 1)) {
            tempLenght = (i - startIndex) + 1;
            if (tempLenght > maxLenght) {
                maxLenght = tempLenght;
            }
            tempLenght = 0;
            startIndex = i;
        } else {
            tempLenght++;    
        }
    }
    return maxLenght;
}

int longestBand(vector<int> v) {
    int size = v.size();
    int max = 0;
    for (int i=0; i<size; i++) {
        if (max < v[i])
        max = v[i];
    }
    int a[max+1];
    memset(a , 0 , sizeof(a));
    for (int i=0; i<size; i++) {
       a[v[i]] = 1;
    }
    int returnMax = INT_MIN;
    int start = 0;
    for (int i=0; i<=max; i++) {
         if (a[i] == 0) {
            if (returnMax < start) {
                returnMax = start;
            }
            start = 0;
        } else {
            start++;
        }
    }
    return returnMax;
}

bool isIsomorphic(string s, string t) {
        if (s.size() != t.size()) {
            return false;
        }
        char a[256];
        memset(a , '\0', sizeof(a));
        unordered_map<char , bool> m;
        for (int i=0; i<t.size(); i++) {
           int index = s[i];
            if (a[index] == '\0') {
                if (m.count(t[i]) > 0) {
                   return false;
               }
                a[index] = t[i];
                s[i] = t[i];
                m[t[i]] = true;
            } else {
                s[i] = a[index];
            }
        }
        if (s == t) {
            return true;
        }
        return false;
    }
    
    
int largestBand(vector<int> v) {
    int size = v.size();
    unordered_set<int> s;
    for (int i=0; i<size; i++) {
        s.insert(v[i]);
    }
    int largestValue = 1;
    
    for (auto element: s) {
        int parent = element - 1;
        if (s.find(parent) == s.end()) {
            int nextElem = element + 1;
            int count = 1;
            while (s.find(nextElem) != s.end()) {
                count++;
                nextElem++;
            }
            
            if (count > largestValue) {
                largestValue = count;
            }
        }    
    }
    
    return largestValue;
}    

int rain(vector<int> v) {
     int size = v.size();
     int maxWater = 0;
     for (int i=1; i<size-1; i++) {
         int currentElem = v[i];
        int forwardMax = currentElem;
        int backwardMax = currentElem;
        for (int j = i-1; j>=0; j--) {
            if (backwardMax < v[j]) {
                backwardMax = v[j];
            }
        }
        for (int k= i+1; k<size; k++) {
            if (forwardMax < v[k]) {
                forwardMax = v[k];
            }
        }
    maxWater += min(forwardMax , backwardMax) - currentElem;
     } 
     return maxWater;
}

int rainWater(vector<int> a) {
    vector<int> forwardMax;
    vector<int> backwardMax;
    int size = a.size();
    int max = a[0];
    forwardMax.push_back(a[0]);
    for (int i=1; i<size; i++) {
           if (max < a[i]) {
               max = a[i];
           }
           forwardMax.push_back(max);
    }
    int minVal = a[size-1];
    backwardMax.push_back(minVal);
    for (int i=size-2; i>=0; i--) {
        if (minVal < a[i]) {
            minVal = a[i];
        }
        // cout<<minVal<<" ";
        backwardMax.push_back(minVal);
    }
    int returnMax = 0;
    for (int i=0; i<size; i++) {
        // cout<<forwardMax[i]<<" "<<backwardMax[i]<<endl;
        returnMax += min(forwardMax[i], backwardMax[size-i-1]) - a[i];
    }
    return returnMax;
}

vector<int> subArraySort(vector<int> a) {
    int size = a.size();
    int index1 = -1 , index2 = -1;
    for (int i=1; i<size-1; i++) {
        if (a[i-1] > a[i] || a[i+1] < a[i]) {
            if (index1 == -1) {
                index1 = a[i];
            } else {
                if (index1 > a[i]) {
                    index2 = index1;
                    index1 = a[i];
                } else {
                    index2 = a[i];
                } 
            }
        }
    }
    if (a[size-2] > a[size-1]) {
        if (index1 == -1) {
            index1 = a[size-1];
            } else {
                index2 = a[size-1];
            }
    }
    vector<int> result;
    if (index1 == -1 && index2 == -1) {
        result.push_back(-1);
        result.push_back(-1);
    }
    cout<<index1<<" "<<index2<<endl;
    
    for (int i=0; i<size; i++) {
        if (index1 < a[i] && index1 > -1) {
            index1 = i;
            break;
        }
    }
    int finalValue;
    for (int i=size-1; i>=0; i--) {
        if (index2 <= a[i] && index2 > -1) {
            finalValue = i;
        } 
        if (index2 > a[i]) {
            break;
        }
    }
    result.push_back(index1);
    result.push_back(finalValue);
    return result;
}

bool subArrayHelper(vector<int> a , int index) {
    int size = a.size() - 1;
    
    if (index == 0) {
        return a[0] > a[1];
    }
    
    if (size == index) {
        return a[size] < a[size-1];
    }
    
    return a[index] > a[index + 1] or a[index -1] > a[index] ;
}

void subArraySortOptimized(vector<int> a) {
    int size = a.size();
    int smaller = INT_MAX;
    int bigger = INT_MIN;
    for (int i=0; i<size; i++) {
        if (subArrayHelper(a , i)) {
            smaller = min(smaller, a[i]);
            bigger = max(bigger, a[i]);
        }
    }
    
    if (smaller == INT_MAX )
    cout<<-1<<" , "<<-1;
    
    cout<<bigger<<" "<<smaller<<endl;
    
    int left = 0;
    while (smaller >= a[left]) 
    left++;
    
    int right = size - 1;    
    while (bigger <= a[right])
    right--;
    
     cout<<left<<" , "<<right;
}


int minSwaps(vector<int> v) {
    int size = v.size();
    pair<int,int> ap[size];
    for (int i=0; i<size; i++) {
        ap[i].first = v[i];
        ap[i].second = i;
    }
    sort(ap , ap+size);
    int ans = 0;
    vector<bool> visited(size, false);
    for (int i=0; i<size; i++) {
        if (visited[i] || i == ap[i].second) {
            continue;
        }
        int current = i;
        int cycle = 0;
        while (!visited[current]) {
            visited[current] = true;
            cycle++;
            current = ap[current].second;
        }
        ans += cycle - 1;
    }
    return ans;
}

pair<int,int> minDifference(vector<int> a,vector<int> b){

    //Complete this method
    int size1 = a.size();
    int size2 = b.size();
    // sort(a.begin(), a.end());
    // sort(b.begin(), b.end());
    int min = INT_MAX;
    pair<int,int> ans;
    
    for (int i=0; i<size1; i++) {
        int localMin = INT_MAX;
        int secondValue;
        for (int j=0; j<size2; j++) {
            if (localMin > abs(a[i] - b[j]) ) {
                localMin =abs(a[i] - b[j]);
                secondValue = b[j];
            }
        }
        if (min > localMin) {
            min = localMin;
            ans.first = a[i];
            ans.second = secondValue;
        }
    }
    
    return ans;
}

vector<int> productArray(vector<int> arr){
    
    //Create an output Array
    int n = arr.size();
    vector<int> output(n,1);
    
    //update the output array and return
    //complete the code
    
    int left[n];
    int right[n];
    
    int leftValue = arr[0];
    int rightValue = arr[n-1];
    right[n-1] = rightValue;
    left[0] = leftValue;
    
    for (int i=1; i<n; i++) {
        leftValue *= arr[i];
        left[i] = leftValue;
    }
    int rightIt = 1;
    for (int i=n-2; i>=0; i--) {
        rightValue *= arr[i];
        right[i] = rightValue;
    }
    output[0] = right[1];
    output[n-1] = left[n-2];

    for (int i=1; i<=n-2; i++) {
        output[i] = left[i-1] * right[i+1]; 
    }
    
    return output;
}

//My Approach for sliding window ---->
void houseImplementation(vector<int> v, int k) {
    if (v.size() == 1 && v[0] == k) {
        cout<<0<<endl;
        return;
    }
     int i=0;
     int j=i;
     int sum = v[i];
     while(i<=j) {
         if (v[i] == k) {
             cout<<i<<" "<<i<<endl;
         }
        
        if (sum < k) {
            j++;
            sum += v[j];
        } else if (sum > k) {
            sum -= v[i];
            i++;
        }
        
        if (sum == k) {
            cout<<i<<" "<<j<<endl;
            sum -= v[i];
            i++;
            j++;
            sum += v[j];
        }
     }
}

OPtimized this ----> (House problem)

void houseImplementationOptimized(vector<int> v, int k) {
     int i=0;
     int j=0;
     int n = v.size();
     int sum = 0;
     while(j<n) {
        sum += v[j];
        j++;
        
        while (sum > k && i < j) {
            sum -= v[i];
            i++;
        }
        
        if (sum == k) {
            cout<<i<<" "<<j-1<<endl;
        }
        
     }
}



int main()
{
// vector<int> v {1,2, 3,4,5,6,7,8,9,15};

// vector<vector<int>> result = tiplet(v , 18);

// for (int i=0; i<result.size(); i++) {
//     for (int j=0; j<result[i].size(); j++) {
//         cout<<result[i][j]<<" ";
//     }
//     cout<<endl;
// }
// vector<int> v{5,6,1,2,3,4,5,4,3,2,0,1,2,3,-2,4};
// cout<<mountain(v);
vector<int> v{10,11,5,4,3,2,1};
// cout<<longestBand(v);

// cout<<isIsomorphic("paper" , "title");
// vector<int> v{};
// cout<<largestBand(v);
  cout<<minSwaps(v);
}
