/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

****************************** Dynamic Problem *************************************/

#include <bits/stdc++.h>
using namespace std;


int ladderDp(int dp[] , int n) {
    if (n < 0) {
        return 0;
    }
    if (n == 0 || n == 1) {
        return 1;
    }
    if (dp[n] > -1) {
        return dp[n];
    }
    
    dp[n] = ladderDp(dp, n-1) + ladderDp(dp, n-2) + ladderDp(dp, n-3);
    return dp[n];
}

void coinChange(vector<int> v ,  vector<int> out,  int sum,  int& minCoin) {
    if (sum == 0) {
        int outSize = out.size();
        minCoin = minCoin > outSize ? minCoin : outSize;
        return;
    }
    if (sum < 0) {
        return;
    }
    
    for (int i=0; i<v.size(); i++) {
        out.push_back(v[i]);
        coinChange(v, out , sum - v[i], minCoin);
        out.pop_back();
    }
}

// using dp

int coinChangeTopDown(vector<int> v, int n , int sum, vector<int> dp) {
    if (sum < 0) {
        return INT_MAX;
    }
    if (sum == 0) {
        return 0;
    }
    
    if (dp[sum] > -1) {
        return dp[sum];
    }
    int minVal  = INT_MAX;
    // bool change = false;
    for (int i=0; i<v.size(); i++) {
        if (sum - v[i] >= 0) {
         int value = coinChangeTopDown(v , n , sum - v[i] , dp);
         minVal = minVal > value ? value : minVal;
        }
    }
    dp[sum] = 1 + minVal;    
    return  dp[sum];
}

int rodCutting(vector<int> price, int n) {
    if (n <= 0) {
        return 0;
    }
    int maxVal = INT_MIN;
    for (int i=0; i<n; i++) {
            int value = price[i] + rodCutting(price, n - (i+1));
            maxVal = maxVal > value ? maxVal : value;
    }
    return maxVal;
}

int rodCuttingDP(vector<int> price, int n , vector<int> dp) {
      if (n <= 0) {
        return 0;
    }
    if (dp[n] > -1) {
        return dp[n];
    }
    int maxVal = INT_MIN;
    for (int i=0; i<n; i++) {
            int value = price[i] + rodCuttingDP(price, n - (i+1) , dp);
            maxVal = maxVal > value ? maxVal : value;
    }
    dp[n] = maxVal;
    return maxVal;
}

int arrayJumps(vector<int> v , int index,  int n) {
    if (index == n-1)
    return 0;
    
    if (index >= n)
    return INT_MAX;
    
    int steps = v[index];
    int ans = INT_MAX;
    for (int i=1; i<=steps; i++ ) {
        int value = arrayJumps(v, index + i, n);
        ans =  min(ans , value);
    }
    return 1 + ans;
}

int frogJump(vector<int> v , int index, int n) {
    if (index == n-1) {
        return 0;
    }
    if (index >= n) {
        return INT_MAX;
    }
    
    int ans1 = INT_MAX, ans2 = INT_MAX;
    if (index+1 < n) {
        ans1 = abs(v[index] - v[index+1]) + frogJump(v, index+1, n);
    }
    if (index+2 < n) {
        ans2 = abs(v[index] - v[index+2]) + frogJump(v,index+2, n);
    }
    
    return min(ans1, ans2);
}

int NonAdjacentSum(vector<int> v, int index, int n) {
    if (index >= n) {
        return INT_MIN;
    }
    
    int ans = 0;
    for (int i = index+2; i<n; i++) {
        int value = NonAdjacentSum(v, i, n);
        ans = max(ans , value);
    }
    return v[index] + ans;
}

void LIS() {
    vector<int> v{50,4,10,8,30,100};
    vector<int> dp;
    dp.push_back(1);
    
    for (int i=1; i<6; i++) {
        int j = i - 1;
        int ans = 0;
        while(j >= 0) {
            if (v[i] > v[j]) {
                ans  = max(ans, dp[j]);
            }
            j--;
        }
        dp[i] = 1 + ans;
    }
    int max = 0;
    for (int i=0; i<6; i++) {
        if (max < dp[i]) {
            max = dp[i];
        }
    }
    cout<<".........max............."<<max;
}

int main()
{
    // int n = 4;
    // int dp[n+1];
    // for (int i=0; i<=n; i++) {
    //     dp[i] = -1;
    // }
    // cout<<ladderDp(dp, n);
    // vector<int> v {1,3,7,10};
    // vector<int> out;
    // int sum = 15;
    // for (auto i = 0 ; i<=sum; i++ ) {
    //     out.push_back(-1);
    // }
    // int minCoin = INT_MIN;
    // coinChange(v, out, sum , minCoin);
    // cout<<minCoin<<endl;
    // cout<<coinChangeTopDown(v, 4 , sum , out);
    vector<int> v {6,10,12,7,9,14};
    // vector<int> dp;
    // for (int i=0; i<=v.size(); i++)
    //     dp.push_back(-1);
    // cout<<rodCutting(v, 8)<<endl;
    // cout<<rodCuttingDP(v, 8 , dp);
    // cout<<arrayJumps(v,0,12);
    // cout<<frogJump(v, 0, 4);
    // cout<<NonAdjacentSum(v, 0, 6);
    LIS();
    return 0;
}
