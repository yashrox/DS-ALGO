/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

****************************** Dynamic Problem *************************************/

#include <bits/stdc++.h>
using namespace std;


int ladderDp(int dp[] , int n) {
    if (n < 0) {
        return 0;
    }
    if (n == 0 || n == 1) {
        return 1;
    }
    if (dp[n] > -1) {
        return dp[n];
    }
    
    dp[n] = ladderDp(dp, n-1) + ladderDp(dp, n-2) + ladderDp(dp, n-3);
    return dp[n];
}

void coinChange(vector<int> v ,  vector<int> out,  int sum,  int& minCoin) {
    if (sum == 0) {
        int outSize = out.size();
        minCoin = minCoin > outSize ? minCoin : outSize;
        return;
    }
    if (sum < 0) {
        return;
    }
    
    for (int i=0; i<v.size(); i++) {
        out.push_back(v[i]);
        coinChange(v, out , sum - v[i], minCoin);
        out.pop_back();
    }
}

// using dp

int coinChangeTopDown(vector<int> v, int n , int sum, vector<int> dp) {
    if (sum < 0) {
        return INT_MAX;
    }
    if (sum == 0) {
        return 0;
    }
    
    if (dp[sum] > -1) {
        return dp[sum];
    }
    int minVal  = INT_MAX;
    // bool change = false;
    for (int i=0; i<v.size(); i++) {
        if (sum - v[i] >= 0) {
         int value = coinChangeTopDown(v , n , sum - v[i] , dp);
         minVal = minVal > value ? value : minVal;
        }
    }
    dp[sum] = 1 + minVal;    
    return  dp[sum];
}

int rodCutting(vector<int> price, int n) {
    if (n <= 0) {
        return 0;
    }
    int maxVal = INT_MIN;
    for (int i=0; i<n; i++) {
            int value = price[i] + rodCutting(price, n - (i+1));
            maxVal = maxVal > value ? maxVal : value;
    }
    return maxVal;
}

int rodCuttingDP(vector<int> price, int n , vector<int> dp) {
      if (n <= 0) {
        return 0;
    }
    if (dp[n] > -1) {
        return dp[n];
    }
    int maxVal = INT_MIN;
    for (int i=0; i<n; i++) {
            int value = price[i] + rodCuttingDP(price, n - (i+1) , dp);
            maxVal = maxVal > value ? maxVal : value;
    }
    dp[n] = maxVal;
    return maxVal;
}

int arrayJumps(vector<int> v , int index,  int n) {
    if (index == n-1)
    return 0;
    
    if (index >= n)
    return INT_MAX;
    
    int steps = v[index];
    int ans = INT_MAX;
    for (int i=1; i<=steps; i++ ) {
        int value = arrayJumps(v, index + i, n);
        ans =  min(ans , value);
    }
    return 1 + ans;
}

int frogJump(vector<int> v , int index, int n) {
    if (index == n-1) {
        return 0;
    }
    if (index >= n) {
        return INT_MAX;
    }
    
    int ans1 = INT_MAX, ans2 = INT_MAX;
    if (index+1 < n) {
        ans1 = abs(v[index] - v[index+1]) + frogJump(v, index+1, n);
    }
    if (index+2 < n) {
        ans2 = abs(v[index] - v[index+2]) + frogJump(v,index+2, n);
    }
    
    return min(ans1, ans2);
}

int NonAdjacentSum(vector<int> v, int index, int n) {
    if (index >= n) {
        return INT_MIN;
    }
    
    int ans = 0;
    for (int i = index+2; i<n; i++) {
        int value = NonAdjacentSum(v, i, n);
        ans = max(ans , value);
    }
    return v[index] + ans;
}

void LIS() {
    vector<int> v{50,4,10,8,30,100};
    vector<int> dp;
    dp.push_back(1);
    
    for (int i=1; i<6; i++) {
        int j = i - 1;
        int ans = 0;
        while(j >= 0) {
            if (v[i] > v[j]) {
                ans  = max(ans, dp[j]);
            }
            j--;
        }
        dp[i] = 1 + ans;
    }
    int max = 0;
    for (int i=0; i<6; i++) {
        if (max < dp[i]) {
            max = dp[i];
        }
    }
    cout<<".........max............."<<max;
}

int frogJumpK(vector<int> v , int index, int n, int k) {
    if (index == n-1) {
        return 0;
    }
    if (index >= n) {
        return INT_MAX;
    }
    int j = 1;
    int ans = INT_MAX;
    while(j <= k && (index + j) < n) {
        int value =  abs(v[index] - v[index+j]) + frogJumpK(v , index + j, n , k);
        ans = min(value , ans);
        j++;
    }
    return ans;
}

int longestCommonSubSequence(string s1 ,  string s2 , int i  , int j, vector<vector<int>>& v) {
    if (s1.size() <= i || s2.size() <= j) {
        return 0;
    }
    if (v[i][j] != -1) {
        return v[i][j];
    }
    if (s1[i] == s2[j]) {
        return 1 + longestCommonSubSequence(s1 , s2 , i+1, j+1, v);
    } else {
        return max(longestCommonSubSequence(s1, s2 , i+1, j, v) , longestCommonSubSequence(s1, s2, i , j+1, v));
    }
}

// select first or last

int wineDp(vector<int> v, int start , int end, int year) {
    if (start > end) {
        return 0;
    }
    int includeStart =  (v[start] * year) + wineDp(v, start+1, end, year + 1);
    int includeEnd = (v[end] * year) + wineDp(v, start , end-1, year+1);
    
    return max(includeStart, includeEnd);
    
}

int maxCountingSequence(string s1 , string s2 , int i , int j) {
    if ( (i == -1 and j == -1 ) or j == -1 ) {
        return 1;
    }
    
    if (i == -1) {
        return 0;
    } 
    
    if (s1[i] == s2[j]) {
        return  (maxCountingSequence(s1, s2, i-1, j) + maxCountingSequence(s1, s2, i-1, j-1));
    } else {
        return maxCountingSequence(s1, s2 , i-1, j);
    }
}

int knapsack(vector<int> prices,  vector<int> weight, int sum, int index ) {
    if (index >= prices.size() || sum <= 0) {
        return 0;
    }
    
    
    int val1 = 0 , val2 = 0;
    if (weight[index] < sum) {
        val1 = prices[index] + knapsack(prices, weight, sum - weight[index], index + 1);    
    }
    val2 = knapsack(prices, weight, sum, index + 1);
    
    return max(val1, val2);
}

long long find(int n, vector<int> coins, int index, vector<vector<int>>& dp) {
    if (n == 0) {
        return 1;
    }
    if (n < 0 || index >= coins.size()) {
        return 0;
    }
    if (dp[index][n] > -1) {
        return dp[index][n];
    }
    long long int ans = 0;
    ans += find(n - coins[index] , coins, index, dp);
    ans += find(n , coins, index + 1, dp);
    dp[index][n] = ans;
    return ans;
}

long long findCombinations(int n, vector<int> coins){
    //Write your code here. Do not modify the function or parameters. You can use helper function if needed.

    int size = coins.size();
    
    vector<vector<int>> dp(size , vector<int>(n+1, -1));
    return find(n , coins, 0 , dp);
}

int editDistance(string s1 , string s2, int m, int n) {
    if (s1.size() == 0 ) {
        return n;
    } else if (s2.size() == 0) {
        return m;
    }
    
    if (s1[0] == s2[0]) {
        return editDistance(s1.substr(1),s2.substr(1), m-1, n-1);
    } else {
        return 1 + min(editDistance(s1.substr(1) , s2.substr(1), m-1, n-1) , min(editDistance(s1.substr(1),s2, m-1,n), editDistance(s1,s2.substr(1),m,n-1)));    
    }
}

pair<char , int> gameOfwits(string s , int i, int m , int n) {
    if (m>n) {
        pair<char , int> p;
        p.first = 'X';
        p.second = 0;
    }
    char turn;
    if (i%2 == 0) {
        turn = 'O';
    } else {
        turn = 'H';
    }
    pair<char, int> v1 = make_pair(turn, 0);
    pair<char, int> v2 = make_pair(turn, 0);
    pair<char, int> ans;
    int update = 0;
    if (turn == s[m]) {
        v1 = gameOfwits(s, i+1, m+1, n); 
        update = 1;
    }  
    if (turn == s[n]) {
        v2 = gameOfwits(s, i+1, m , n-1);
        update = 1;
    }
    if (!update) {    
    ans.first = turn == 'H' ? 'O' : 'H';
        ans.second = 2 + (n - m);
        return ans;
    }
    
    if (v1.second > v2.second) {
        return v1;
    } else {
        return v2;
    }
}

int main()
{
    // int n = 4;
    // int dp[n+1];
    // for (int i=0; i<=n; i++) {
    //     dp[i] = -1;
    // }
    // cout<<ladderDp(dp, n);
    // vector<int> v {1,3,7,10};
    // vector<int> out;
    // int sum = 15;
    // for (auto i = 0 ; i<=sum; i++ ) {
    //     out.push_back(-1);
    // }
    // int minCoin = INT_MIN;
    // coinChange(v, out, sum , minCoin);
    // cout<<minCoin<<endl;
    // cout<<coinChangeTopDown(v, 4 , sum , out);
    vector<int> v {1,2,3};
    vector<int> w{5,20,20,10};
    int n = 4;
    // vector<int> dp;
    // for (int i=0; i<=v.size(); i++)
    //     dp.push_back(-1);
    // cout<<rodCutting(v, 8)<<endl;
    // cout<<rodCuttingDP(v, 8 , dp);
    // cout<<arrayJumps(v,0,12);
    // cout<<frogJump(v, 0, 4);
    // cout<<NonAdjacentSum(v, 0, 6);
    // cout<<frogJumpK(v , 0, 5 , 3);
    // LIS();
    // string s1 = "ABC";
    // string s2 = "ABCECGD";
    // cout<<maxCountingSequence(s2, s1, 6 , 2);
    // int n = s1.size();
    // int m = s2.size();
    // vector<vector<int>> dp(n , vector<int>(m , -1));
    // cout<<longestCommonSubSequence(s1, s2 , 0 , 0, dp);
    // cout<<wineDp(v, 0 , 4 , 1);
    // int max = knapsack(w,v,11, 0);
    // cout<<max<<endl;
    // cout<<findCombinations(n , v);
    // string s1 = "geek";
    // string s2 = "gesek";
    // cout<<editDistance(s1,s2, 4, 5);
    string s = "OHOHOOHO";
    pair<char, int> x = gameOfwits(s,0,0,7);
    cout<<x.first<<" "<<x.second<<endl;
    return 0;
}
