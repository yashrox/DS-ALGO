/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*************************** STRING  *********************************************/

#include <iostream>
#include <string>
#include <bits/stdc++.h>

using namespace std;

void stringSearch(string big,string small){
    //store the occurrences in the result vector
    vector<int> result = {};
    int index = big.find(small, 0);
    while(index != -1) {
        result.push_back(index);
        index  = big.find(small, index + 1);
    }
    for (int i=0; i<result.size(); i++) {
        cout<<result[i]<<endl;
    }
}

void removeSpaces(char s[], int size) {
    int totalSpaces = 0;
    for (int i=0; i<size; i++) {
        if (s[i] == ' ') {
            totalSpaces++;
        }
    }
    cout<<totalSpaces<<endl;
    int j = (size - 1) +  (3 * totalSpaces) - totalSpaces;
    int iterater = j;
    s[iterater + 1] = '\0';
    cout<<j<<endl;
    for (int i=(size - 1); i>=0; i--) {
        if (s[i] == ' ') {
            s[j--] = '%';
            s[j--] = '0';
            s[j--] = '2';
        } else {
            s[j--] = s[i];
        }
    }
    cout<<endl;
    for (int i=0; i<=iterater; i++) {
        cout<<s[i]<<" ";
    }
}

void stringToeknizer(string s , char d) {
    vector<string> v;
    
    int start = 0;
    int end = 0;
    for (int i=0; i<s.size(); i++) {
        if (s[i] == d) {
            end = i ;
            v.push_back(s.substr(start , end - start));
            start = end + 1;
        }
    }
    
    v.push_back(s.substr(start , end-start));
    
    for (int i=0; i< int(v.size()); i++) {
        cout<<v[i]<<endl;
    }
}

string subset(string s1 , string s2) {
    int size1 = s1.size();
    int size2 = s2.size();
    int i = 0, j = 0;
    
    while (i < size1  && j < size2) {
        if (s1[i] == s2[j]) {
            j++;
        }
        i++;
    }
    
    if (j == size2) {
        return "true";
    } 
    return "false";
}

vector<string> subSequence;
void sortSubsequence(string s , string o) {
    if (s[0] == '\0') {
        subSequence.push_back(o);
        return;
    }
    sortSubsequence(s.substr(1), o + s[0]);
    sortSubsequence(s.substr(1) , o);
}

int lexcographical(string str) {
    int ans = 0;
    int i= 0;
    while (i < str.size() ) {
        ans = ans * 10 + int(str[i] - 'a' + 1);
    }
    cout<<ans<<endl;
    return ans;
}

bool sortStringOp(string a ,  string b) {
    if (a.length() == b.length()) {
        return a  < b;
    }
    return a.length() < b.length();
}

void generateSortedSubset(string s) {
    string out = "";
    sortSubsequence(s , out);
    sort(subSequence.begin(), subSequence.end(), sortStringOp);
    for (int i=0; i<subSequence.size(); i++) {
        cout<<subSequence[i]<<" ";
    }
}

bool compare(int a , int b) {
    string x = to_string(a);
    string y = to_string(b);
    int i = 0 , j = 0 ;
    while(i<x.length() && j<y.length()) {
        if (int(x[i]) == int(y[i])) {
        if (x.length() != y.length()) {
            return x.length() < y.length();    
        }
        i++; j++;
        } else {
            return int(x[i]) > int(y[i]);        
        }    
    }
}

string concatenate(vector<int> numbers){
    sort(numbers.begin(), numbers.end(), compare);
    string str = "";
    for (int i=0; i<int(numbers.size()); i++) {
        str += to_string(numbers[i]);
    }
    return str;
}

void compressString(string a){   
    //complete the function to return output string
  string newString = "";
    int maxCount = 0;
    int count = 1;
    char prevChar = a[0];
    for (int i=1; i<a.length(); i++) {
        if (prevChar == a[i]) {
            count++;
        } else {
            newString += prevChar;
            newString += to_string(count);
            if (count > maxCount) {
                maxCount = count;
            }
            count = 1;
            prevChar = a[i];
        }
    }
    newString += prevChar;
    newString += to_string(count);
    
    if (maxCount > 1) {
        cout<<newString;    
        return;
    }
    
   cout<<a;
   return;
}

bool is_Palindrome(string str) {
    int i=0 , size = str.size() - 1;
    
    while (i < size) {
        if (str[i] != str[size]) {
            return false;
        }
        i++;
        size--;
        
    }
    return true;
}

string breakPalindrome(string str) {
    string answer = "";
    
    for (int i=0; i<str.size(); i++) {
        string str2 = str;
        for (char j = 'a' ; j<='z'; j++) {
            if (str2[i] != j) {
                str2[i] = j;
                if (!is_Palindrome(str2)) {
                 if (answer.size() == 0) {
                     answer = str2;
                 } else {
                     answer = min(answer , str2); // lexographically checks
                 }    
                }
            } 
        }
    }
    return answer;
}

string breakPalindromeOptimized(string str) {
    for (int i=0; i<str.size(); i++) {
        int j = str.size() - 1 - i;
        if (i == j) {
            continue;
        }
        if (str[i] != 'a') {
            str[i] = 'a';
            return str;
        }
    }
    str[str.size() - 1] = 'b';
    return str;

}

void convertUpperCaseFirstWord(string str) {
     for (int i=0; i<str.size(); i++) {
        if (i == 0 && str[i] != ' ') {
                str[i] = toupper(str[i]);
        } else if (str[i] == ' ') {
            while(str[i] == ' ') {
                i++;
            }
            str[i] = toupper(str[i]);
        } else {
            str[i] = tolower(str[i]);
        }
    }

    cout<<str<<endl;

}

int main()
{
    // string big = "We are STL STLSTL STLL learning about STL strings. STL string class STL is quite powerful";
    // string small = "STL";
    // stringSearch(big, small);
    char input[100];
    // v = {'h', 'e', 'l', 'l', 'o' , ' ', 'w', 'o', 'r', 'l', 'd', ' ', ' ', 'y', 'o', '?'};
    // cin.getline(input, 100);
    // removeSpaces(input, strlen(input));
    // string str = "hello how are you?";
    // stringToeknizer(str, ' ');
    // vector<string> v{"92 022", "82 12", "77 13"};
    // dstringValue(v , 2 , false, 2);
    string s1 = "abc";
    // getline(cin, s1);
    // string s2 = "cinef";
    // cout<<subset(s1 , s2);
    generateSortedSubset(s1);
    //int y = 'b' - 'a' + 1;
    // cout<<y;
      // vector<int> num{10,200,30,11,1,2,3};
    // cout<<concatenate(num);
    string str = "abxd";
    compressString(str);
    return 0;
}
