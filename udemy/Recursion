/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

******************************** Recursion ***********************************************/

#include <iostream>
#include <set>
#include<vector>
using namespace std;

int stair(int n) {
    if (n < 0) {
        return 0;
    }
    if (n == 1 || n == 0) {
        return 1;
    }
    return stair(n-1) + stair(n-2) + stair(n-3);
}

void subset(string str, string out) {
    if (str.size() == 0) {
        cout<<out<<" ";
        return;
    }
    subset(str.substr(1), out);
    subset(str.substr(1), out + str[0]);
}

int subsetSum(int a[] , int i ,  int n , int sum) {
    
    if (sum == 0) {
        return 1;
    }
    
    if (i >= n) {
        return 0;
    }
    
    int x = subsetSum(a , i+1, n, sum - a[i]);
    int y = subsetSum(a, i+1, n , sum);
    return x + y ;
}

void balancedParanthesis(int n , int open, int close, string str) {
    if (n < open) {
        return;
    }
    if (open == n && close == n) {
        cout<<str<<endl;
        return;
    }
    // cout<<str<<endl;
    balancedParanthesis(n , open + 1, close , str + "(");
    if (open > close) {
        balancedParanthesis(n , open , close+1, str + ")");
    }
}

void printPattern(int n, string str, string a[]) {
    if (n == 0) {
        cout<<str<<endl;
        return;
    }
    
    string input = a[n%10];
    for (int i=0; i<input.size(); i++) {
        printPattern(n/10, input[i] + str, a);
    }
}

void swap(string& a , int i , int j) {
    char temp = a[i];
    a[i] = a[j];
    a[j] = temp;
    return;
}

void permutation(string a , int index, set<string>& result) {
    if (index == a.size() - 1) {
        result.insert(a);
    }
    for (int i=index; i<a.size(); i++) {
        swap(a , index , i);
        permutation(a , index+1, result);
        swap(a, index, i);
    }
}

bool nqueenHelper(int** solver , int i , int j, int length) {
    for (int k=0; k<i; k++) {
        if (solver[k][i]) {
            return false;
        }
    }
    int m = i - 1;
    int n = j - 1;
    
    while (m >= 0 && n >= 0) {
        if (solver[m][n]) {
            return false;
        }
        m--;
        n--;
    }
    
    m = i - 1;
    n = j + 1;
    
    while (m>=0 && n < length) {
        if (solver[m][n]) {
            return false;
        }
        m--;
        n++;
    }
    
    return true;
}

void solveNqueen(int n , int** solver, int index, int& total) {
    if (index >= n ) {
        total++;
        return ;
    }
    for (int i=0; i<n; i++) {
        solver[index][i] = 1;
        if(nqueenHelper(solver, index, i, n)) {
            solveNqueen(n,solver, index+1, total);
        }
        solver[index][i] = 0;
    }
}

int nQUEEN(int n) {

    int** solver;
    for (int i=0; i<n; i++) {
        solver[i] = new int[n];
        for (int j=0; j<n; j++) {
            solver[i][j] = 0;
        }
    }
    int total = 0;
    solveNqueen(n , solver, 0 , total);
    cout<<"total"<<endl;
    return total;
}

// int gameTheory(int start , int end , vector<int> v , int index) {
//     if (start == end) {
       
//       if (v.size() % 2 == 0) {
//         if (index % 2 == 0) {
//             return v[start];
//         } else {
//         return 0;    
//         }   
//       } else {
//           return 0;
//       }
//     }
//     if (start > end) {
//         return 0;
//     }
//     int total = 0;
//     if (index %2 == 0) {
//         int x = v[start] + firstPlayer(start + 1 , end, v, index + 1);
//         int y =  v[end] + firstPlayer(start, end-1, v, index + 1);
//         total = max(x , y);
//     } else {
//         if (v[start] > v[end]) {
//             start++;
//         } else {
//             end--;
//         }
//         int z  = firstPlayer(start , end , v, index + 1);
//         total = z;
//     }
    
//     return total;
// }

// int gameTheory(int start, int end , vector<int> v) {
//     if (start > end) {
//         return 0;
//     }
//     int x  = v[start] + min(gameTheory(start+2, end, v),gameTheory(start+1, end-1,v));
//     int y = v[end] + min(gameTheory(start+1 , end-1, v), gameTheory(start, end-2, v));
//     return max(x, y);
// }

vector<int> returnRat(int n , int rat[][4], int sol[][4], int ans[][4], int i , int j) {
    if (i >= n || j >= n) {
        vector<int> v;
        return v;
    }
    if (sol[i][j] == 1 || rat[i][j] == 0) {
        vector<int> v;
        return v;
    }
    sol[i][j] = 1;
    vector<int> x = returnRat(n , rat, sol, ans, i+1, j);
    vector<int> y = returnRat(n , rat, sol, ans, i , j+1);
    sol[i][j] = 0;
    if (x.size() > y.size()) {
        x.push_back(ans[i][j]);
        return x;
    } else {
        y.push_back(ans[i][j]);
        return y;
    }
}

vector<int> ratInMaze(int n) {
    int a[4][4] = {{1, 0, 0, 0},
                {1, 1, 0, 1},
                {0, 1, 0, 0},
                {1, 1, 1, 1}};
    int b[4][4] = {{0 , 0 , 0 , 0}, 
                {0 , 0, 0, 0},    
                {0 , 0, 0, 0},
                {0 , 0, 0, 0},
                };
    int c[4][4] = {{1,2,3,4} , {5,6,7,8}, {9,10,11,12}, {13,14,15,16}};            
                
    return returnRat(n , a, b, c, 0 , 0);            
}

<----------Failed--->

int returnLongPattern(int a[][10], int b[][10], int m, int n, int i , int j) {
    if (i >= m || j >= n || i < 0 || j < 0) {
        return 0;
    }
    if (b[i][j] == 1 || a[i][j] == 0) {
        return 0;
    }
    b[i][j] = 1;
    int x = returnLongPattern(a , b, m, n , i , j+1);
    int y = returnLongPattern(a , b, m, n , i-1 , j);
    int m2 = returnLongPattern(a , b, m, n , i+1 , j);
    int m1 = returnLongPattern(a , b, m, n , i , j-1);
    b[i][j] = 0;
    return 1 + max(x,max(y , max(m2,m1)));
}

void longPattern() {
    int a[3][10] = {{1,1,1,1,1,1,1,1,1,1}, {1,1,0,1,1,0,1,1,0,1}, {1,1,1,1,1,1,1,1,1,1}};
    int b[3][10] = {{0,0,0,0,0,0,0,0,0,0}, {0,0,0,0,0,0,0,0,0,0}, {0,0,0,0,0,0,0,0,0,0}};
    int n = 10;
    int m = 3;
    cout<<"........."<<returnLongPattern(a , b, m, n , 0 , 0);
}

int main()
{
    // cout<<stair(4);
    // cout<<endl;
    // subset("abc", "");
    // cout<<endl;
    // int a[] = {1,2,3,4,5};
    // int n = 5;
    // int sum = 6;
    // cout<<subsetSum(a, 0, n , sum);
    // balancedParanthesis(3 , 0 , 0 , "");
    // string a[] = {"" , "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    // printPattern(23, "", a);
    // permutation("abc", 0);
    // set<string> result;
    // permutation("aaac" , 0 , result);
    // // vector<string> result1;
    // for (auto i=result.begin(); i!=result.end(); i++) {
    // cout<<*i<<endl;
    // }
    // int x = nQUEEN(4);
    // cout<<x<<endl;
    // vector<int> x =  ratInMaze(4);
    // for (auto i=0; i<x.size(); i++) {
    //     cout<<x[i]<<" ";
    // }
    longPattern();
    return 0;
}
