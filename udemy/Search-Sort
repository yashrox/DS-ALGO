/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>
using namespace std;

int binarySearch(vector<int> a,  int value, int start ,  int end) {
    if (start > end) {
        return -1;
    }
    int mid = (start + end) / 2;
    if (a[mid] == value) {
        return mid;
    } else if (a[mid] > value) {
        return binarySearch(a, value, start, mid-1);
    } else {
        return binarySearch(a, value, mid+1, end);
    }
}

pair<int,int> search(int m, int n, vector<vector<int>> v, int k){
    //write your code here.
    for (int i=0; i<m; i++) {
        int elemFound = binarySearch(v[i], k , 0 , n-1);
        if (elemFound != -1) {
            return make_pair(i , elemFound);
        }
    }
    return make_pair(-1 , -1);
}

void swap(vector<int> v, int i , int j) {
    int temp = v[i];
    v[i] = v[j];
    v[j] = temp;
}

void sort012(vector<int> v) {
    int size = v.size();
    int zero = 0, one = 0; two = size - 1;
    while(one<=two) {
        switch(v[one]) {
            case 0: { swap(v , zero++, one++); break; }
            case 1: { one++; break; }
            case 2: { swap(v, one, two--); break; }
        }
    }
}

void subArrayDistort(vector<int> a) {
    int n = a.size();
    vector<int> sortValue = a;
    int startIndex = INT_MAX;
    int endIndex = INT_MIN;
    sort(sortValue.begin(), sortValue.end());
    for (int i=0; i<n; i++) {
        if (a[i] != sortValue[i]) {
            startIndex = min(startIndex, i);
            endIndex = max(endIndex, i);
        }
    }
    cout<<startIndex<<" "<<endIndex<<endl;
}



***************************************************** sortingSubArray ***************************************************

input -> [0,2,4,7,10,11,7,12,13,14,16,19,29];
output -> [4,6]


pair<int,int> sortingSubArray(vector<int>& v) {
    int n = v.size();
    int minValue = INT_MAX;
    int maxValue = INT_MIN;
    for (int i=0; i<n; i++) {
        if (i == 0) {
            if (v[i] > v[i+1]) {
                minValue = min(minValue, v[i]);
                maxValue = max(maxValue, v[i]);
            }
            continue;
        }
        if (i == n-1) {
            if (v[i] < v[i-1]) {
                minValue = min(minValue, v[i]);
                maxValue = max(maxValue, v[i]);
            }
            continue;        
        }
        if (v[i] < v[i-1] || v[i] > v[i+1]) {
            minValue = min(minValue, v[i]);
            maxValue = max(maxValue, v[i]);
        }
    }
    pair<int,int> p;
    p.first = minValue == INT_MAX ? -1 : minValue;
    p.second = maxValue == INT_MIN ? -1 : maxValue;
    return p;
}

pair<int,int> subarraySorting(vector<int> a){
    //Expected Optimal Complexity O(n) Time, O(1) Space
    //may be start with O(NLogN) and try to improve
    //complete this function
        
    pair<int,int> p = sortingSubArray(a);
    int minValue = p.first;
    int maxValue = p.second;
    int minIndex,maxIndex;
    if (minValue == -1 || maxValue == -1) {
        return {-1,-1};
    }
    int i=0;
    int n=a.size();
    while(i<n) {
        if (minValue < a[i]) {
            minIndex = i;
            break;
        }
         i++;
    }
    i = n-1;
    while(i>=0) {
        if (maxValue > a[i]) {
            maxIndex = i;
            break;
        }
        i--;
    }
    
    
    
    return {minIndex,maxIndex};
}



********************************************************************************************************** Angry Bird ***********************************************

input -> vector<int> v{1,5,9,10,17};
    int m = 3;
output -> 5

// We will make all possible distance of birds -> start = 0 (min bird distance) and end = 16 (v[17] - v[1]);

int angryBirdsDistance(vector<int>& v, int k, int m) {
    
    int i=0;
    int j=0;
    while (j<v.size() && m > 0) {
        if (v[j] - v[i] >= k) {
            m--;
            i++;
        }
        j++;
    }
    
    if (m == 0) {
        return k;
    }
    
    return -1;
}

int angryBirds(vector<int>& v, int m) {
    int n = v.size();
    int start=0;
    int end = abs(v[0] - v[(n-1)]);
    cout<<start<<" "<<end<<endl;
    int maxCount = 0;
    while (start<=end) {
        int mid = (start+end)/2;
        cout<<mid<<endl;
        int isValid = angryBirdsDistance(v, mid, m);
        cout<<"isValid"<<isValid<<" "<<mid<<endl;
        if (isValid == -1) {
            end = mid - 1;
        } else {
            maxCount = max(maxCount, isValid);
            start = mid + 1;
        }
    }
    return maxCount;
}


**************************************************************************************** Find Minimum in Rotated Sorted Array **********************************************************************
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

// 3 4 5 1 2 -> mid = target = 5
// Divide array in 2 parts -> {3,4,5} -> target = 5
// {5,1,2} -> target = 5
// Compute value less than 5

// Case 1 -> Left Side ->  If we are in left part try to collapse the end, if lets say [7,8,1,2] -> will check if (a[mid] > a[end]) this means array smaller lies in right part
// Case 2 -> Right Side -> If we are in right part try to collapse th start, if lets say [3,4,5,6,7] -> will check if (a[mid] < a[end]) this means array smaller lies in left side
// Only these are the catch for collapsing opp side 

 int leftFirst(vector<int>& a, int target, int startIndex, int endIndex) {
        int midIndex = target;
        cout<<"Left "<<midIndex<<endl;
        while(startIndex<=endIndex) {
            int mid = (startIndex + endIndex)/2;
            midIndex = min(midIndex, a[mid]);
            cout<<midIndex<<" "<<a[mid]<<" "<<a[startIndex]<<endl;
            if (a[mid] > a[endIndex]) {
                startIndex = mid + 1;
                continue;
            }
            endIndex = mid - 1;
        }
        return midIndex;
    }

    int rightFirst(vector<int>& a, int target, int startIndex, int endIndex) {
        int midIndex = target;
        while(startIndex<=endIndex) {
            int mid = (startIndex + endIndex)/2;
            midIndex = min(a[mid], midIndex);
            if (a[mid] < a[endIndex]) {
                endIndex = mid - 1;
                continue;
            }
            startIndex = mid + 1;
        }
        return midIndex;
    }
    int findMin(vector<int>& nums) {
        int n = nums.size();
        int start = 0;
        int end = n-1;
        int mid = (start + end ) / 2;
        int leftIndex = leftFirst(nums, nums[mid], start, mid);
        int rightIndex = rightFirst(nums, nums[mid], mid, end);
        return min(leftIndex, min(nums[mid], rightIndex));      
    }





int main()
{
    // vector<vector<int>> v {{1,4,9}, {2,5,10}, {6,7,11}};
    // int m = 3;
    // int n= 3;
    
    // pair<int,int> p = search(m,n,v, 10);
    // cout<<p.first<<" "<<p.second<<endl;
    vector<int> a {0,2,4,7,10,11,7,12,13,14,16,19,29};
    subArrayDistort(a);
    return 0;
}
