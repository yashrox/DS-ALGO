/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <queue>
using namespace std;

class BTNode {
    public: 
    int data;
    BTNode* left;
    BTNode* right;
    BTNode(int data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

class BTOperation {
    public:
    BTNode* root;
    public: 

    BTNode* insertRecur() {
        int data;
        // cout<<"Enter Data"<<endl;
        cin>>data;
        if (data == -1) {
            return NULL;
        }
        BTNode* temp = new BTNode(data);
        temp->left = insertRecur();
        temp->right = insertRecur();
        return temp;
    }
    
    void print(BTNode* temp) {
        if (temp == NULL) {
            return;
        }
        cout<<temp->data<<" ";
        print(temp->left);
        print(temp->right);
    }
    
    void levelOrderPrint() {
        queue<BTNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            BTNode* temp = q.front();
            q.pop();
            cout<<temp->data<<" : "<<" ";
            if (temp->left != NULL) {
                q.push(temp->left);
                cout<<temp->left->data<<" "<<" , ";
            }
            if (temp->right != NULL) {
                q.push(temp->right);
                cout<<temp->right->data<<" ";
            }
            cout<<endl;
        }
    }
    
    int height(BTNode* root) {
        if (root == NULL) {
            return 0;
        }
        return 1 + max (height(root->left) , height(root->right));
    }
    
    int diameter(BTNode* root) {
        if (root == NULL) {
            return 0;
        }
        int maxHeight = height(root->left) + height(root->right);
        int leftDiameter = diameter(root->left);
        int rightDiameter = diameter(root->right);
        return max(leftDiameter , max(rightDiameter , maxHeight));
    }
    
    pair<int,int> diameterOptimized(BTNode* root) {
        if (root == NULL) {
            pair<int,int> p;
            int start = 0;
            p.first = start;
            p.second = start;
            return p;
        }
        
        pair<int,int> left = diameterOptimized(root->left);
        pair<int,int> right = diameterOptimized(root->right);
        pair<int,int> rootValue;
        rootValue.first =  max(left.first , max(right.first , (left.second + right.second)));
        rootValue.second =  1 + max(left.second , right.second);
        return rootValue;
    }
    
    int decedantChanges(BTNode* root) {
        if (root->left == NULL && root->right == NULL) {
            return root->data;
        }
        int storeValue = 0;
        if (root->left) {
            storeValue += decedantChanges(root->left);    
        }
        
        if (root->right) {
            storeValue += decedantChanges(root->right);    
        }
        int valueToreturn = root->data + storeValue;
        root->data = storeValue;
        return valueToreturn;
    }
    
};

int main() {
    // Write C++ code here
    BTOperation action;
    BTNode* root =  action.insertRecur();
    action.root = root;
    //action.levelOrderPrint();
    // cout<<action.diameter(root)<<endl;
    // cout<<action.diameterOptimized(root).first<<endl;
    cout<<action.decedantChanges(root);
    action.levelOrderPrint();
    return 0;
}

// 1 2 4 -1 -1 5 7 -1 -1 -1 3 -1 6 -1 -1
