/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <queue>
#include <math.h>
#include <map>
using namespace std;

class BTNode {
    public: 
    int data;
    BTNode* left;
    BTNode* right;
    BTNode(int data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

class BTOperation {
    public:
    BTNode* root;
    public: 

    BTNode* insertRecur() {
        int data;
        // cout<<"Enter Data"<<endl;
        cin>>data;
        if (data == -1) {
            return NULL;
        }
        BTNode* temp = new BTNode(data);
        temp->left = insertRecur();
        temp->right = insertRecur();
        return temp;
    }
    
    void print(BTNode* temp) {
        if (temp == NULL) {
            return;
        }
        cout<<temp->data<<" ";
        print(temp->left);
        print(temp->right);
    }
    
    void levelOrderPrint() {
        queue<BTNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            BTNode* temp = q.front();
            q.pop();
            cout<<temp->data<<" : "<<" ";
            if (temp->left != NULL) {
                q.push(temp->left);
                cout<<temp->left->data<<" L"<<" , ";
            }
            if (temp->right != NULL) {
                q.push(temp->right);
                cout<<temp->right->data<<" R";
            }
            cout<<endl;
        }
    }
    
    int height(BTNode* root) {
        if (root == NULL) {
            return 0;
        }
        return 1 + max (height(root->left) , height(root->right));
    }
    
    int diameter(BTNode* root) {
        if (root == NULL) {
            return 0;
        }
        int maxHeight = height(root->left) + height(root->right);
        int leftDiameter = diameter(root->left);
        int rightDiameter = diameter(root->right);
        return max(leftDiameter , max(rightDiameter , maxHeight));
    }
    
    pair<int,int> diameterOptimized(BTNode* root) {
        if (root == NULL) {
            pair<int,int> p;
            int start = 0;
            p.first = start;
            p.second = start;
            return p;
        }
        
        pair<int,int> left = diameterOptimized(root->left);
        pair<int,int> right = diameterOptimized(root->right);
        pair<int,int> rootValue;
        rootValue.first =  max(left.first , max(right.first , (left.second + right.second)));
        rootValue.second =  1 + max(left.second , right.second);
        return rootValue;
    }
    
    int decedantChanges(BTNode* root) {
        if (root->left == NULL && root->right == NULL) {
            return root->data;
        }
        int storeValue = 0;
        if (root->left) {
            storeValue += decedantChanges(root->left);    
        }
        
        if (root->right) {
            storeValue += decedantChanges(root->right);    
        }
        int valueToreturn = root->data + storeValue;
        root->data = storeValue;
        return valueToreturn;
    }
    
    pair<int,int> heightBalanced(BTNode* root) {
        pair<int,bool> p;
        if (root == NULL) {
            p.first = 0;
            p.second = true;
            return p;
        }
        
        pair<int,bool> left = heightBalanced(root->left);
        pair<int,bool> right = heightBalanced(root->right);
        
        p.first = 1 + max(left.first , right.first);
        
        p.second =  abs(left.first - right.first) <= 1 ? true : false ;
        p.second = p.second && left.second && right.second;
        return p;
    }
    
    int subSetSum(BTNode* root) {
        if (root == NULL) {
            return 0;
        }
        int sum  = 0;
        if (root->left) {
            sum += subSetSum(root->left->left);
            sum += subSetSum(root->left->right);
        }
        if (root->right) {
            sum += subSetSum(root->right->left);
            sum += subSetSum(root->right->right);
        }
        int sum1 = subSetSum(root->left);
        int sum2 = subSetSum(root->right);
        
        return max((root->data + sum) , (sum1 + sum2));
    }
    
    pair<int,int> subSetSumOptimized(BTNode* root) {
        pair<int,int> p;
        if (root == NULL) {
            p.first = 0;
            p.second = 0;
            return p;
        }
        pair<int,int> left = subSetSumOptimized(root->left);
        pair<int,int> right = subSetSumOptimized(root->right);
        
        p.first = left.second + right.second + root->data;
        p.second = max(left.second  , left.first) + max(right.second , right.first);
        return p;
    }
    
    void verticalOrder(BTNode* root , map<int, vector<int>>& m, int val) {
        if (root == NULL) {
            return;
        }
        if (m.count(val) > 0) {
            m[val].push_back(root->data);
        } else {
            vector<int> v;
            v.push_back(root->data);
            m[val] = v; 
        }
        verticalOrder(root->left , m, val - 1);
        verticalOrder(root->right , m, val + 1);
    }
    
    void leftView(BTNode * root){
    //Complete the function
    if (root == NULL) {
        return ;
    }
    int val = 0;
    queue<pair<BTNode*, int>> q;
    q.push(make_pair(root , 0));
    vector<int> result; 
    while (!q.empty()) {
        pair<BTNode*, int> child = q.front();
        if (child.first->left) {
            q.push(make_pair(child.first->left , child.second + 1));    
        } 
        if (child.first->right) {
             q.push(make_pair(child.first->right, child.second + 1));
        }

        if (val == child.second) {
            // result.push_back(child.first->data);
            cout<<child.first->data<<" ";
            val++;
        }
        q.pop();
    } 
}

    void printMirrorImage(BTNode* root) {
        if (root == NULL) {
            return;
        }
        BTNode* temp = root->left;
        root->left = root->right;
        root->right = temp;
        printMirrorImage(root->left);
        printMirrorImage(root->right);
    }
    
    bool checkEqual(BTNode * root1, BTNode * root2) {
    if (root1 == NULL && root2 == NULL) {
        return true;
    }else if (root1 == NULL && root2 != NULL) {
        return false; 
    } else if (root1 != NULL && root2 == NULL) {
        return false;
    }
    cout<<root1->data<<" "<<root2->data<<endl;
    if (root1->data != root2->data) {
        return false;
    }
    bool left =  checkEqual(root1->left , root2->left);
    bool right = checkEqual(root1->right , root2->right);
    return left && right;
    }
};

int main() {
    // Write C++ code here
    BTOperation action;
    BTNode* root =  action.insertRecur();
    action.root = root;
    action.levelOrderPrint();
    BTNode* root1 =  action.insertRecur();
    // cout<<action.diameter(root)<<endl;
    // cout<<action.diameterOptimized(root).first<<endl;
    // cout<<action.decedantChanges(root);
    // action.levelOrderPrint();
    // cout<<action.heightBalanced(root).second<<endl;
    // cout<<action.subSetSum(root)<<endl;
    // cout<<max(action.subSetSumOptimized(root).first , action.subSetSumOptimized(root).second);
    // action.leftView(root);
    action.printMirrorImage(root);
    // cout<<endl<<endl;
    // action.levelOrderPrint();
    cout<<action.checkEqual(root1 , root);
    return 0;
}

// 1 2 4 -1 -1 5 7  8 -1 -1 -1 -1 3 -1 6 -1 -1
// 1 2 4 -1 -1 5 7   -1 -1 -1 3 -1 6 -1 -1
// 10 2 7 -1 -1 8 -1 -1 3 12 -1 -1 15 -1 14 -1 -1 
// 6 3 1 -1-1 7 -1 -1 8 4 7 -1 -1 1 -1 -1 2 -1 3 -1 -1 
// 6 8 2 3 -1 -1 -1 4 1 -1 -1 7 -1 -1 3 7 -1 -1 1 -1 -1
