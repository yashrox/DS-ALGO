// Lenght of longest Non Repeating String ***************************************************

int lengthOfLongestSubstring(string s) {

        unordered_map<char, int> m;
        int i=0;
        int count = 0;
        int maxCount = 0;
        int n = s.length();
        int startWindow = 0;
        while(i<n) {
            if (m.count(s[i]) > 0) {
                int index = m[s[i]]; 
                // At starting startWindow will be 0
                // There are cases abcdbea
                // If at any point startWindow > prev duplicate index this will not consider, we have move from that window
                // duplicate pre index = 2 , startWindow = 4 -> prev count is already not stored
                if (startWindow < index + 1) {
                    count = i - index;
                    startWindow = index + 1;
                } else {
                    count++;
                }
                
            }  else {
                count++;
            }
            m[s[i]] = i;
            maxCount = max(count, maxCount);
            i++;
        }
   
         return maxCount;
    }







******************************************************  Housing Udemy Question -> ****************************************************************
Problem Statement -> Max area count = 8

    vector<int> v{1,3,2,1,4,1,8,1,3,2,1,1,2};
      houseImplementationOptimized(v,8);


void houseImplementationOptimized(vector<int> v, int k) {
     int i=0;
     int j=0;
     int n = v.size();
     int sum = 0;
     while(j<n) {
        sum += v[j];
        j++;
        
        while (sum > k && i < j) {
            sum -= v[i];
            i++;
        }
        
        if (sum == k) {
            cout<<i<<" "<<j-1<<endl;
        }
        
     }
}





*********************************************************************** Min Window String ***********************************************************
Input -> "cabwefgewcwaefgcf"
ANS -> cwae

// We can also do this using 256 char array -> T[256] = {0}; S[256] = {0};
    // This will be easily approach
    string minWindow(string s, string t) {

        if (t.length() > s.length()) {
            return "";
        }

        unordered_map<char,int> temp;
        unordered_map<char,int> compareMap;

        for (int i=0; i<t.length(); i++) {
            if (compareMap.count(t[i]) > 0) {
                compareMap[t[i]] += 1;
            } else {
                compareMap[t[i]] = 1;
            }
        }

        int i = 0;
        int n = s.length();
        int startWindow = 0;
        int start = -1;
        int maxCount = INT_MAX;
        int count = 0;
        while (i < n) {
            if (temp.count(s[i]) > 0) {
                temp[s[i]]++;
            } else {
                temp[s[i]] = 1;
            }
            if (compareMap.count(s[i]) > 0 && temp[s[i]] <= compareMap[s[i]]) {
                    count++;
            }
            if (count == t.length()) {
                    while(compareMap.count(s[startWindow]) == 0 || (compareMap.count(s[startWindow]) > 0 
                            && compareMap[s[startWindow]] < temp[s[startWindow]])) {
                                // cout<<"DELETE Values"<<s[startWindow]<<" "<<
                                temp[s[startWindow]] -= 1;
                                startWindow++;
                    }
                     int newCount  = i - startWindow + 1;
                     if (newCount < maxCount) {
                         start = startWindow;
                         maxCount = newCount;
                     }
            }
            i++;
        }
        if (start == -1) {
            return "";
        }
        return s.substr(start, maxCount);
    }





