/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class TreeNode {
    public:
    int data;
    vector<TreeNode*> children;

    TreeNode(int data) {
        this->data = data;
    }
};

TreeNode* takeInputLevelWise() {
    int rootData;
    cout<<"Enter Root Data"<<endl;
    cin>>rootData;
    TreeNode* root = new TreeNode(rootData);
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty()) {
        TreeNode* front = q.front();
        q.pop();
        int n;
        cout<<"Enter no of children of "<<front->data<<endl;
        cin>>n;
        for (int i=0;i<n;i++) {
            int childrenData;
            cout<<"Enter the "<<i<<" children of "<<front->data;
            cin>>childrenData;
            TreeNode* childrenRoot = new TreeNode(childrenData);
            front->children.push_back(childrenRoot); 
            q.push(childrenRoot);
        }
    }
    return root;
}

TreeNode* takeInput() {
    int rootData;
    cout<<"Enter Data"<<endl;
    cin>>rootData;
    TreeNode* root = new TreeNode(rootData);
    int n;
    cout<<"Enter No of children"<<endl;
    cin>>n;
    for (int i=0; i<n; i++) {
        TreeNode* children = takeInput();
        root->children.push_back(children);
    }
    return root;
}

void printLevelWise(TreeNode* root) { 
    if (root == NULL) {
        return;
    }
    queue<TreeNode*> q;
    q.push(root);
    
    while(!q.empty()) {
        TreeNode* front = q.front();
        q.pop();
        cout<<front->data<<":";
        for (int i=0; i<front->children.size(); i++) {
            cout<<front->children[i]->data<<",";
            q.push(front->children[i]);
        }
        cout<<endl;
    }
}


void printree(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    cout<<root->data<<":";
    for(int i=0; i<root->children.size(); i++) {
        cout<<root->children[i]->data<<",";
    }
    cout<<endl;
    for(int i=0; i<root->children.size(); i++) {
        printree(root->children[i]);
    }
}

int height(TreeNode* root) {
    if (root == NULL) {
        return 0;
    }
    int ans = 0;
    for (int i=0; i<root->children.size(); i++) {
    int value = height(root->children[i]);
    ans = max(ans , value);
    }
    return ans + 1;
}

void depthOfNode(TreeNode* root, int k) {
    if (k == 0) {
        cout<<root->data<<endl;
    }
    for (int i=0; i<root->children.size(); i++) {
        depthOfNode(root->children[i], k-1);
    }
}

int totalLeaveNode(TreeNode* root) {
    if (root == NULL) {
        return 0;
    }
    int ans = 0;
    for (int i=0; i<root->children.size(); i++) {
        ans += totalLeaveNode(root->children[i]);
    }
    if (root->children.size() == 0) {
        return 1;
    }
    return ans;
}

int main()
{

   TreeNode* root = takeInputLevelWise();
    printLevelWise(root);
    cout<<endl<<endl<<endl;
    cout<<height(root);
    cout<<endl<<endl<<endl;
    cout<<"enter depth"<<endl;
    int depth;
    cin>>depth;
    depthOfNode(root , depth);
    cout<<endl<<endl;
    cout<<totalLeaveNode(root);
    // 10 3 20 30 40 2 40 50 0 0 0 0 

    return 0;
}
