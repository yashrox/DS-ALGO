//head is the head of you linked list
// Following is the node structure
/**************
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};
***************/

#include<bits/stdc++.h>

bool odd(node* head , int length){
    int mid = (length + 1)/2 ;
    node* temp1 = head;
    node* temp2 ;
    while(mid --){
        temp1 = temp1->next;
    }
    
    temp2 = temp1->next ;
    temp1->next = NULL ;
    
    while(temp2->next != NULL){
       node* temp3  = temp2 -> next;
        temp2->next = temp1;
        temp1 = temp2;
        temp2 = temp3;  
    }
     temp2->next = temp1 ;
    
    mid = (length + 1)/2  - 1;

    while(mid > 0 && head != NULL && temp2 != NULL ){
        if(head->data == temp2 -> data){
            head = head->next;
            temp2 = temp2->next;
            
            mid-- ;
            continue ;
        }else{
            return false;
        }
    }
    return true;
}


bool even(node* head , int length){
    int mid = length / 2 ;
     node* temp1 = head ;
	node* temp2 ;
    
    while(mid--){
        temp1 = temp1 -> next ;
    }
    temp2 = temp1->next ;
    temp1->next = NULL ;
    
    while(temp2->next != NULL){
       node* temp3  = temp2 -> next;
        temp2->next = temp1;
        temp1 = temp2;
        temp2 = temp3;
    }
    
    temp2->next = temp1 ;
    
    mid = length/2 ;
   
    while(mid > 0 && head != NULL && temp2 != NULL ){
   // cout<<mid;
        if(head->data == temp2 -> data){
           // cout<<head-> data<<"  "<<temp2->data<<endl;
            head = head->next;
            temp2 = temp2->next;
            mid-- ;
           
            continue ;
        }else{
            return false;
        }
    }
    return true ;
}


bool check_palindrome(node* head)
{
    //write your code here
	node* temp = head ;
    int length = 0 ;
    while(temp != NULL){
        temp = temp -> next ;
        length++ ;
    }
    
    if(length == 1){
        return true;
    }
    
    if(length == 2){
        node* temp  = head -> next ;
        if(head->data == temp->data){
            return true ;
        }
        return false ;
        
    }
    
    if(length % 2 == 0){
        return even(head , length);
    }else {
     	return odd(head , length);   
    }
    
}
