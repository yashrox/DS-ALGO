Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]

https://leetcode.com/problems/partition-list/description/?envType=study-plan-v2&envId=top-interview-150



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if (head == NULL) {
            return head;
        }
        ListNode* slow = head;
        ListNode* fast = head->next;
        ListNode* prevSlow = NULL;
        ListNode* prevFast = head;

        ListNode* maxCountItr = head;
        int maxValue = INT_MIN;
        while(maxCountItr != NULL) {
            maxValue = max(maxValue, maxCountItr->val);
            maxCountItr = maxCountItr->next;
        }

        if (maxValue < x) {
            return head;
        }

        while(slow != NULL && fast != NULL) {
            ListNode* nextItr = fast->next;
            if (fast->val < x && slow->val > fast->val && slow->val >= x) {
                if(prevSlow == NULL) {
                    head = fast;
                }
                prevFast->next = fast->next;
                if (prevSlow != NULL) {
                    prevSlow->next = fast;
                }
                fast->next = slow;
                prevSlow = fast;
                fast = nextItr;

                continue;
            }
            if (slow->val < x) {
                prevSlow = slow;
                slow = slow->next;
            }
            prevFast = fast;
            fast = nextItr;
        }
        return head;
    }
};
